-스프링 layered architecture(구조) : presentation layer(보여지는것, 웹 관련 모든것, *서버도 여기.....) / service layer(중심) / data access layer(DB)

-spring core 모듈의 핵심 개념 : IoC / DI

-bean 객체 만들기
   # xml 방식 : <bean>
   # 어노테이션 방식 : @Component(일반적), @Service(service layer), @Respository(data access layer), @controller(presentation layer)

-DI : 생성자나 setter 메소드를 통해서 injection
   # xml 방식 : <constructor-arg>,<porpety>
   # 어노테이션 : @Autowired(한개의 타입만), @Qualifier(이름지정), @Resource(앞에 두개 합친것), @Inject(오토와이어드와 비슷)

-스프링 시스템 안에는 서블릿 컨테이너가 없어졌다(x)
  #시스템내에 presentation layer층에 있다. 웹과 관련된 층

-AOP : 
   #관점 지향프로그래밍 : 핵심기능(Core Concerns)과 부가기능(횡단 관심사, Cross-cutting)을 나누는것, 
                                *부가기능을 시스템으로 넘겨 자동적으로, 
                                *개발자는 핵심기능만 작업

-src/main/java (자바), scr/main/resources(xml)

-인터페이스 만든 목적 : 오버라이딩할 메소드이름을 규격화, 다형성을 구현하기 위해(업 캐스팅)

-VO(value object) : 층들간의 데이터 이동(여러데이터를 한번에 이동)

-DB 사용 : 
    1.드라이버를 받아서 드라이버를 메모리에 넣음(로딩), 
    2.getConnection, 
    3.쿼리 사용, 
    4.닫기

-DAO : 
    # 사용 : DB getConnection, executeUpdate, close
    # 로딩 과정 : pom.xml에 적어서 메이븐이 자동으로

spring JDBC : 쿼리만 개발자가 나머지 로딩,겟 커넥션, 닫기 시스템이 해줌

-GenericXmlApplicationContext : 스프링 컨테이너 설정 파일
