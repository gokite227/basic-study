-스프링 layered architecture(구조) : presentation layer / service layer / data access layer
      #service layer : spring AOP
      #data access layer : spring JDBC, Mybatis
      #presentation layer : spring MVC

-AOP(Aspect Oriented Programming)

-트렌젝션 : 데이터베이스의 상태를 변경시키기 위해 수행하는 작업(sql문)
Commit, Rollback(끝까지 수행되지않으면 처음으로)
ex) 회원가입 가입(insert)전에 트랜젝션을 넣어야한다(데이터가 바뀌기 전에 넣어 주어야함)

-조인 포인트 : 클라이언트가 호출하는 모든 비즈니스 메소드, 포인트 컷 대상 또는 포인트컷 후보
-포인트 컷 : 수만은 조인 포인트 중에 실제 어드바이스(부가기능)적용할 곳을 선별하기위한 표현식

위빙: 포인트컷에 의해서 결정된 타겟의 조인 포인트에 부가기능(어드바이스)을 삽입하는 과정 
애스팩트(Aspect):어떤 포인트 컷에 어떤 부가기능(어드바이스)을 위빙할것인지 설정

어드바이스 동작 시점 :
    #Before : 메소드 실행 전
    #After Returuning : 메소드가 성공적으로 반환되면 동작
    #After Throwing : 메소드 실행중 예외 발생하면 동작
    #After : 메소드 실행후 무조건 실행, 예외 발생과 연관없이
    #Around : 앞뒤 모두 실행 (procedingJoinPoint)
    ex) 성공적으로 반환 = After Returuning, After / 예외 발생 = After Throwing, After

-포인트 컷 정의: 
    #XML기반 설정
	<bean id="log" class="LogAdvice/">
	<aop:config>
		<aop:pointcut id= "getPointcut" expression = "execution(*com.springbook.biz..*Impl.get*(..)"/> //Impl로 끝나면서 get으로 시작하는 메소드만
		<aop:aspect ref="log">
			<aop:before pointcut ="getPointcut" method="printLog"/> //위빙
		<aop:aspect/>
   #어노테이션 설정

-JoinPoint 인터페이스 : Before / After Returning / After Throwing / After 어드바이스에서 사용
-ProceedingJoinPoint 인터페이스 : Around 어드바이스에서 사용 [JoinPoint메소드+proceed( )]


프레젠테이션까지 구현할꺼면 test파일 필요없어용 
디버그 에즈-메이븐 클린-메이븐 인스톨

